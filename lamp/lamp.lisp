(in-package :cl-user)

#|

A sample of an extremely simple actor / fbp system

Problem:

1. We have a lamp with two toggle switches.

2. One toggle switch turns the lamp ON and OFF.

3. The other toggle switch sets the lamp intensity cyclically - LOW, MEDIUM, HIGH, LOW, MEDIUM, HIGH, etc.

We will invent two "events" to signify the two toggle switches: :power, :intensisty

|#

(defclass actor ()
  ((busy :accessor busy :initform nil) ;; true if actor is already being run by the scheduler, false otherwise
   (in-queue :accessor in-queue :initform nil) ;; queue of events waiting to be processed by the actor
   (out-queue :accessor out-queue :initform nil))) ;; queue of events generated by the actor while processing a single input event
 
(defclass state-machine (actor)
  ((state :accessor state) ;; current state of the state machine (e.g. a Keyword)
   (entry-code :accessor entry-code) ;; code to be executed when state machine is entered
   (exit-code :accessor exit-code) ;; code to be executed when state machine is exited
   (code :accessor code))) ;; code to be executed when an input event arrives
  
(defclass lamp-machine (state-machine)
  ((intensity :accessor intensity :initform :low)))

(defparameter *lamp* nil
  "the lamp")

(defmethod entry-for-on-state ((self lamp-machine))
  "entry-code for lamp :ON state"
  (format *standard-output* "lamp is ON~%")
  (setf (intensity self) :low)
  (format *standard-output* "intensity is LOW~%"))

(defmethod exit-for-on-state ((self lamp-machine))
  "exit code from lamp :ON state (to :OFF state)"
  (format *standard-output* "lamp is OFF~%"))

(defmethod exec ((self state-machine) ev)
  "execute one step of the state machine given input event ev"

  #+nil(format *standard-output* "sm ~A got ~A~%" self ev)

  (case (state self)

    (:off
     (when (eq :power ev)
       ;; execute the entry code for :ON and move to state :ON
       (setf (state self) :on)
       (entry-for-on-state self)))

    (:on
     ;; N.B. this is a sub-state-machine wherein the "parent" state reacts to :power events and
     ;; the "child" machine reacts to :intensity events
     (case ev
       (:power ;; handled by "parent" (main) machine
        ;; turn the lamp off
        (setf (state self) :off)
        (exit-for-on-state self))
       (:intensity  ;; "child" machine
        (case (intensity self)
          (:low
           (setf (intensity self) :medium)
           (format *standard-output* "intensity is MEDIUM~%"))
          (:medium
           (setf (intensity self) :high)
           (format *standard-output* "intensity is HIGH~%"))
          (:high
           (setf (intensity self) :low)
           (format *standard-output* "intensity is LOW~%"))))))))

(defmethod initialize-instance :after ((self lamp-machine) &key &allow-other-keys)
  (setf (state self) :off)
  (setf (intensity self) :low)
  (setf (code self) #'exec))


(defparameter *ready-queue* nil)

(defun dispatcher ()
  (loop
   :until (null *ready-queue*)
   :do (let ((tuple (pop *ready-queue*)))
         ;; an item on the ready queue is an event (:power or :intensity) paired with a state-machine
         (destructuring-bind (sm ev)
             tuple
           ;; critical section
           (unless (busy sm)
             (setf (busy sm) t)
             (setf (in-queue sm) (append (in-queue sm) (list ev)))
             (funcall (code sm) sm ev)
             (setf (busy sm) nil))))))
             ;; end critical section

(defmethod send ((self state-machine) ev)
  "send an event to a state machine"
  ;; critical section
  (setf *ready-queue* (append *ready-queue* (list (list self ev))))
  #+clarity (dispatcher))
  ;; end critical section

(defun test0 ()
  (setf *lamp* (make-instance 'lamp-machine))
  (send *lamp* :power)
  (send *lamp* :power)
  (send *lamp* :power)
  (send *lamp* :power)
  (send *lamp* :power)
  (dispatcher))
  
(defun test1 ()
  (setf *lamp* (make-instance 'lamp-machine))
  (send *lamp* :power)
  (send *lamp* :intensity)
  (send *lamp* :intensity)
  (send *lamp* :intensity)
  (send *lamp* :intensity)
  (dispatcher))
  
(defun test2 ()
  (setf *lamp* (make-instance 'lamp-machine))
  (send *lamp* :power)
  (send *lamp* :intensity)
  (send *lamp* :intensity)
  (send *lamp* :intensity)
  (send *lamp* :intensity)
  (send *lamp* :power)
  (dispatcher))
  
